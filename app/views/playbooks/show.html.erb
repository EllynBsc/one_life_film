
<div style="position: fixed" class="alert alert-info alert-dismissible" id="change-notice" role="alert" hidden>
  <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
  Please save the order by clicking the save order button!
  <button id="save-order" class="btn"> Save order </button>
</div>

<div id="playbook" class="tab-content">
  <div class="playbook-date text-center" style="padding: 100px 0px;">
    <h1>
      <%= @playbook.booking.date_wedding.strftime('%A, %b %d') %>
    </h1>
    <p>
      By <%= @playbook.booking.name %>
    </p>
  </div>
  <div class="container">
    <div class="row">
      <div id="playlines-container">
        <button type="submit" name="submit" id="sort-by-time">SORT BY TIME (in progress!)</button>
        <ul ondragstart="" id="playlines">
          <% if @playbook.playlines.any? %>
          <% @playbook.playlines.sort_by(&:order_number).each do |playline| %>
          <%= render 'playlines/show', playline: playline %>
          <% end %>
          <% end %>
        </ul>
      </div>
      <div class="row">
        <%= render 'playlines/form', playbook: @playbook, playline: @playline, times: @times %>
      </div>
    </div>
  </div>
</div>
</div>

<script>
  const timeButton = document.getElementById('sort-by-time');
  let timedArray = [];
  button.addEventListener('click', function(event){
    var lines = document.querySelectorAll('.line');
    // TO-DO SORT BY DATA ATTRIBUTE data-time

  });
</script>



<!-- soon as there is an order change -> pop up appears with 'save order' -->
<script>
  const changeNotice = document.getElementById('change-notice')
  function handleDragStart(e) {
    this.style.opacity = '1';  // this / e.target is the source node.
  }

  var cols = document.querySelectorAll('#playlines .line');
  [].forEach.call(cols, function(col) {
    col.addEventListener('dragstart', handleDragStart, false);
  });

  function handleDragStart(e) {
    this.style.opacity = '1';  // this / e.target is the source node.
  }

  function handleDragOver(e) {
    if (e.preventDefault) {
      e.preventDefault(); // Necessary. Allows us to drop.
    }

    e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.

    return false;
  }

  function handleDragEnter(e) {
    // this / e.target is the current hover target.
    this.classList.add('over');
  }

  function handleDragLeave(e) {
    this.classList.remove('over');  // this / e.target is previous target element.
  }

  // var cols = document.querySelectorAll('#playlines .line');
  // [].forEach.call(cols, function(col) {
  //   col.addEventListener('dragstart', handleDragStart, false);
  //   col.addEventListener('dragenter', handleDragEnter, false);
  //   col.addEventListener('dragover', handleDragOver, false);
  //   col.addEventListener('dragleave', handleDragLeave, false);
  // });

  function handleDrop(e) {
    // this / e.target is current target element.

    if (e.stopPropagation) {
      e.stopPropagation(); // stops the browser from redirecting.
    }

    // See the section on the DataTransfer object.

    return false;
  }

  function handleDragEnd(e) {
    // this/e.target is the source node.

    [].forEach.call(cols, function (col) {
      col.classList.remove('over');
    });
  }

  var cols = document.querySelectorAll('#playlines .line');
  [].forEach.call(cols, function(col) {
    col.addEventListener('dragstart', handleDragStart, false);
    col.addEventListener('dragenter', handleDragEnter, false)
    col.addEventListener('dragover', handleDragOver, false);
    col.addEventListener('dragleave', handleDragLeave, false);
    col.addEventListener('drop', handleDrop, false);
    col.addEventListener('dragend', handleDragEnd, false);
  });

  var dragSrcEl = null;

  function handleDragStart(e) {
    // Target (this) element is the source node.
    this.style.opacity = '1';

    dragSrcEl = this;

    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/html', this.innerHTML);
  }
  function handleDrop(e) {
    // this/e.target is current target element.

    if (e.stopPropagation) {
      e.stopPropagation(); // Stops some browsers from redirecting.
    }

    // Don't do anything if dropping the same column we're dragging.
    if (dragSrcEl != this) {
      // Set the source column's HTML to the HTML of the column we dropped on.
      // dragSrcEl.innerHTML = this.innerHTML;
      // this.innerHTML = e.dataTransfer.getData('text/html');

      function swapDiv(event,elem){
        elem.parentNode.insertBefore(elem, event);
      }

      swapDiv(this, dragSrcEl);
      // Add swap their order attribute
      let prevOrder = dragSrcEl.getAttribute('data-order');
      dragSrcEl.setAttribute('data-order', this.getAttribute('data-order'));
      this.setAttribute('data-order', prevOrder);
      changeNotice.hidden = false;
      // Going to try to swap whole divs of place in DOM.

    }
    return false;
  }


  const button = document.getElementById('save-order');
  button.addEventListener('click', function(event){
    var lines = document.querySelectorAll('.line');
    // console.log(lines);
    let count = 1
    // Update their order_number attribute in the database
    lines.forEach(function(line){
      fetch(`/playlines/${line.getAttribute('data-id')}/set_order`, {
        method: "PATCH",
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          order_number: count,
          credentials: 'same-origin'
        })
      });
      count ++;
    });
    changeNotice.hidden = true;
  })

</script>
