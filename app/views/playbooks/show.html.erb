<div class="container">
  <div class="row">
    <% if @playbook.playlines.any? %>
    <div id="playlines">
      <ul ondragstart="" id="playlines">
      <% @playbook.playlines.sort_by(&:order_number).each_with_index do |playline, index| %>
        <%= render 'playlines/show', playline: playline, index: index %>
      <% end %>
      </ul>
    </div>
    <% end %>
    <%= render 'playlines/form', playbook: @playbook, playline: @playline %>
  </div>
  <button id="save-order"> Save order </button>
</div>



<!-- soon as there is an order change -> pop up appears with 'save order' -->
<style>
  .column.over {
    border: 2px dashed #000;
  }
</style>


<script>

  function handleDragStart(e) {
  this.style.opacity = '1';  // this / e.target is the source node.
}

var cols = document.querySelectorAll('#playlines .line');
[].forEach.call(cols, function(col) {
  col.addEventListener('dragstart', handleDragStart, false);
});

function handleDragStart(e) {
  this.style.opacity = '1';  // this / e.target is the source node.
}

function handleDragOver(e) {
  if (e.preventDefault) {
    e.preventDefault(); // Necessary. Allows us to drop.
  }

  e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.

  return false;
}

function handleDragEnter(e) {
  // this / e.target is the current hover target.
  this.classList.add('over');
}

function handleDragLeave(e) {
  this.classList.remove('over');  // this / e.target is previous target element.
}

var cols = document.querySelectorAll('#playlines .line');
[].forEach.call(cols, function(col) {
  col.addEventListener('dragstart', handleDragStart, false);
  col.addEventListener('dragenter', handleDragEnter, false);
  col.addEventListener('dragover', handleDragOver, false);
  col.addEventListener('dragleave', handleDragLeave, false);
});

function handleDrop(e) {
  // this / e.target is current target element.

  if (e.stopPropagation) {
    e.stopPropagation(); // stops the browser from redirecting.
  }

  // See the section on the DataTransfer object.

  return false;
}

function handleDragEnd(e) {
  // this/e.target is the source node.

  [].forEach.call(cols, function (col) {
    col.classList.remove('over');
  });
}

var cols = document.querySelectorAll('#playlines .line');
[].forEach.call(cols, function(col) {
  col.addEventListener('dragstart', handleDragStart, false);
  col.addEventListener('dragenter', handleDragEnter, false)
  col.addEventListener('dragover', handleDragOver, false);
  col.addEventListener('dragleave', handleDragLeave, false);
  col.addEventListener('drop', handleDrop, false);
  col.addEventListener('dragend', handleDragEnd, false);
});

var dragSrcEl = null;

function handleDragStart(e) {
  // Target (this) element is the source node.
  this.style.opacity = '1';

  dragSrcEl = this;

  e.dataTransfer.effectAllowed = 'move';
  e.dataTransfer.setData('text/html', this.innerHTML);
}
function handleDrop(e) {
  // this/e.target is current target element.

  if (e.stopPropagation) {
    e.stopPropagation(); // Stops some browsers from redirecting.
  }

  // Don't do anything if dropping the same column we're dragging.
  if (dragSrcEl != this) {
    // Set the source column's HTML to the HTML of the column we dropped on.
    dragSrcEl.innerHTML = this.innerHTML;
    this.innerHTML = e.dataTransfer.getData('text/html');
    // Add swap their order attribute
    let prevOrder = dragSrcEl.getAttribute('data-order');
    dragSrcEl.setAttribute('data-order', this.getAttribute('data-order'));
    this.setAttribute('data-order', prevOrder);
    // Update their order_number attribute in the database
    var lines = [this, dragSrcEl]
    lines.forEach(function(line){
      console.log(line.getAttribute('data-order'));
    fetch(`/playlines/${line.getAttribute('data-id')}/set_order`, {
      method: "PATCH",
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
        body: JSON.stringify({
          order_number: line.getAttribute('data-order'),
          credentials: 'same-origin'
        })
      });
    });
  }
  return false;
}

</script>
